{"meta":{"title":"巴才网","subtitle":"Code on blog","description":"show the code snippet & notes of programming.","author":"Cable Fan","url":"https://cablefan.github.io","root":"/"},"pages":[],"posts":[{"title":"Kotlin Basic","slug":"Kotlin-Basic","date":"2025-01-21T09:21:03.000Z","updated":"2025-01-22T07:15:48.499Z","comments":true,"path":"2025/01/21/Kotlin-Basic/","permalink":"https://cablefan.github.io/2025/01/21/Kotlin-Basic/","excerpt":"","text":"Kotlin注解 参考：https://blog.csdn.net/zyctimes/article/details/127199167 常用函数注解：Suppress，Volatile, Synchronized, Bindable, RequiresApi，SerializedName Deprecated：如果需要废弃一个方法，只需要在方法钱加上 @Deprecated 即可。 Suppress：如果需要消除一些编译时的警告，可以使用 @Suppress(“xxx”) 。 Volatile：为了强制变量中的更改立即对其他线程可见，我们可以使用注解 @Volatile。 Synchronized：Java 有 synchronized 关键字，可以将其应用于方法以确保一次只有一个线程可以访问它们。进入同步方法的线程获得锁（被锁定的对象是包含类的实例），并且在释放锁之前没有其他线程可以进入该方法。Kotlin通过 @Synchronized 注解提供了相同的功能。 Bindable：数据绑定有两种与数据交互的基本方式：BaseObservable 类及其关联的 @Bindable 注释，以及 LiveData 可观察包装器（LiveData observable wrapper）。 RequiresApi：需要调用一些之前版本的API，比如需要调用API 26，Android 8 (Oreo)，即，在函数的上一行加上 @RequiresApi(Build.VERSION_CODES.O) 即可。 SerializedName：通常使用@SerializedName批注来映射JSON字段。 巧用Kotlin：内置函数let、also、with、run、apply大大提高你的开发效率！ 参考：https://cloud.tencent.com/developer/article/1591238 let：定义一个变量在一个特定作用域，使其在作用域内可使用，（统一）避免一个判空操作。返回值 &#x3D; 最后一行 &#x2F; return的表达式。 aslo：与let类似，区别在于：返回值 &#x3D; 传入的对象的本身。 with：调用同一个对象的多个方法 &#x2F; 属性时，可以省去对象名重复，直接调用方法名 &#x2F; 属性即可，返回值 &#x3D; 函数块的最后一行 &#x2F; return表达式。 run：结合了let、with两个函数的作用，返回值 &#x3D; 函数块的最后一行 &#x2F; return表达式。 apply：与run函数类似，但区别在于返回值，apply函数返回传入的对象的本身。 总结：","categories":[{"name":"Kotlin","slug":"Kotlin","permalink":"https://cablefan.github.io/categories/Kotlin/"},{"name":"Android","slug":"Kotlin/android","permalink":"https://cablefan.github.io/categories/Kotlin/android/"}],"tags":[]},{"title":".NET hotel manager system code study","slug":"NET-hotel-manager-system-code-study","date":"2024-12-26T10:41:39.000Z","updated":"2024-12-26T10:51:29.535Z","comments":true,"path":"2024/12/26/NET-hotel-manager-system-code-study/","permalink":"https://cablefan.github.io/2024/12/26/NET-hotel-manager-system-code-study/","excerpt":"","text":"来自：https://gitee.com/dacom/hotel-management-system 的大聪&#x2F;酒店管理系统。安装过程 VS2022+SQLServer2012。 数据库直接附加，注意设置文件权限。 错误： 缺少log4net组件，开源组件，直接NuGet搜索安装即可，注意版本，必须兼容.NET4.0（选了2.0.9.0），仅安装到提示错误的项目（TestProject）。使用教程参考：https://blog.csdn.net/CSDNMantou/article/details/102697863。 在证书存储区找不到清单签名证书。参考：https://blog.csdn.net/zb_myrabbit/article/details/83152811，取消ClickOne勾选即可。 4.","categories":[{"name":".Net","slug":"Net","permalink":"https://cablefan.github.io/categories/Net/"},{"name":"Desktop","slug":"Net/Desktop","permalink":"https://cablefan.github.io/categories/Net/Desktop/"},{"name":"C#","slug":"Net/Desktop/csharp","permalink":"https://cablefan.github.io/categories/Net/Desktop/csharp/"}],"tags":[]},{"title":"Laravel Filament Notes","slug":"laravel-filament","date":"2024-12-23T11:12:28.000Z","updated":"2024-12-24T02:41:43.710Z","comments":true,"path":"2024/12/23/laravel-filament/","permalink":"https://cablefan.github.io/2024/12/23/laravel-filament/","excerpt":"","text":"Laravel Filament 使用流水笔记。 [2024-06-12] Select组件通过relationship关联列表 在编辑表中定义BelongsTo字段，关联到提供列表的表Model。1234 public function category(): BelongsTo&#123; return $this-&gt;belongsTo(Category::class, &#x27;category_id&#x27;, &#x27;id&#x27;);&#125; 再定义Select组件，使用relationship方法关联进来12Forms\\Components\\Select::make(&#x27;category_id&#x27;) -&gt;relationship(&#x27;category&#x27;, &#x27;name&#x27;), 可以通过getOptionLabelFromRecordUsing方法将显示值进行自定义。 [2024-06-12] Select（或Radio）组件的值必须是键名-键值对 Select组件指定的值，即使显示值和保存值相同，也必须设置数组的键名-键值对，否则无法正常显示（可能获取到了默认数字键名0,1…无法匹配）12345Forms\\Components\\Select::make(&#x27;Country&#x27;)-&gt;options([ &#x27;英国&#x27; =&gt; &#x27;英国&#x27;, &#x27;美国&#x27; =&gt; &#x27;美国&#x27;, &#x27;德国&#x27; =&gt; &#x27;德国&#x27; ]) [2024-06-11] Filament中的Tabs Tab::make($name)-&gt;label($label)，创建时make中的$name参数必须是规范的组件名，而不是标题（显示标题通过label函数指定），指定中文等不规范的命名将导致页面异常并且不可点击。 而Forms\\Components\\Section组件则是相反的，它的label()方法并不起作用，标题必须作为make()方法的参数传入。 [2024-01-18] Filament.Table头部按钮1234$table-&gt;headerActions([ ExportAction::make(), ... //创建Action数组], HeaderActionsPosition::Bottom) //指定对方方式，Bottom为左对齐 [2024-01-18] 创建一个弹出ModalDialog的Action123456789101112131415Tables\\Actions\\Action::make(&#x27;sync&#x27;) -&gt;label(__(&#x27;Sync&#x27;)) -&gt;form([ //创建一个选择框 Forms\\Components\\Select::make(&#x27;channel_id&#x27;) -&gt;label(__(&#x27;Shop&#x27;)) -&gt;required() -&gt;options(Shop::all()-&gt;pluck(&#x27;Title&#x27;, &#x27;ChannelId&#x27;)) ]) -&gt;modalWidth(MaxWidth::Small) //指定对话框大小 -&gt;action(function (Table $table, array $data) &#123; //alert($data[&#x27;channel_id&#x27;]); $filter = $table-&gt;getFilter(&#x27;shop&#x27;); $filter-&gt;modifyQueryUsing(fn (Builder $query) =&gt; $query-&gt;where([&quot;ChannelId&quot; =&gt; $data[&quot;channel_id&quot;]]) ); [2024-01-19] 在form中添加按钮 在form中可用的Components并没有按钮组件，而要创建Action并调用-&gt;button()实现； 但是，form()方法只接受Forms\\Components\\组件的数组，直接添加Action实例是不允许的； 正确的做法是，创建一个Actions，并向make方法的参数传入一个数组，在该数组中创建Action： 123456789-&gt;form([ ... //其它组件 Forms\\Components\\Actions::make([ Forms\\Components\\Actions\\Action::make(&#x27;Generate excerpt&#x27;) -&gt;action(function (array $data): void &#123; //执行操作 &#125;) ])","categories":[{"name":"PHP","slug":"php","permalink":"https://cablefan.github.io/categories/php/"},{"name":"Notes","slug":"php/notes","permalink":"https://cablefan.github.io/categories/php/notes/"}],"tags":[]},{"title":"Git Command Guide","slug":"first-blog","date":"2024-12-23T09:44:03.000Z","updated":"2024-12-26T07:39:25.476Z","comments":true,"path":"2024/12/23/first-blog/","permalink":"https://cablefan.github.io/2024/12/23/first-blog/","excerpt":"GIT命令行指引 您还可以按照以下说明从计算机中上传现有文件。 Git 全局设置12git config --global user.name &quot;Cable Home&quot;git config --global user.email &quot;cablefan@hotmail.com&quot; 创建一个新仓库1234567git clone http://&#123;old-domain&#125;/private/mybanks.gitcd mybanksgit switch -c maintouch README.mdgit add README.mdgit commit -m &quot;add README&quot;git push -u origin main 推送现有文件夹123456cd existing_foldergit init --initial-branch=maingit remote add origin http://`&#123;old-domain&#125;`/private/mybanks.gitgit add .git commit -m &quot;Initial commit&quot;git push -u origin main 推送现有的 Git 仓库12345cd existing_repogit remote rename origin old-origingit remote add origin http://`&#123;old-domain&#125;`/private/mybanks.gitgit push -u origin --allgit push -u origin --tags 切换分支：git checkout -b &lt;branch name&gt; 设置远程URL：git branch --set-upstream-to=origin/&lt;branch name&gt; 修改远程URL：git remote set-url origin http://&#123;new-domain&#125;/cable/guide.git 注： [2023-06-25] 原动态域名&#123;old-domain&#125;过期停用，改为&#123;new-domain&#125;。 [2023-09-04] 原服务器（CentOS8无法启动），启用&#123;new-domain&#125;. 更换远程url命令：git remote set-url origin &#39;http://`&#123;new-domain&#125;`/tips/linux.git&#39;","text":"GIT命令行指引 您还可以按照以下说明从计算机中上传现有文件。 Git 全局设置12git config --global user.name &quot;Cable Home&quot;git config --global user.email &quot;cablefan@hotmail.com&quot; 创建一个新仓库1234567git clone http://&#123;old-domain&#125;/private/mybanks.gitcd mybanksgit switch -c maintouch README.mdgit add README.mdgit commit -m &quot;add README&quot;git push -u origin main 推送现有文件夹123456cd existing_foldergit init --initial-branch=maingit remote add origin http://`&#123;old-domain&#125;`/private/mybanks.gitgit add .git commit -m &quot;Initial commit&quot;git push -u origin main 推送现有的 Git 仓库12345cd existing_repogit remote rename origin old-origingit remote add origin http://`&#123;old-domain&#125;`/private/mybanks.gitgit push -u origin --allgit push -u origin --tags 切换分支：git checkout -b &lt;branch name&gt; 设置远程URL：git branch --set-upstream-to=origin/&lt;branch name&gt; 修改远程URL：git remote set-url origin http://&#123;new-domain&#125;/cable/guide.git 注： [2023-06-25] 原动态域名&#123;old-domain&#125;过期停用，改为&#123;new-domain&#125;。 [2023-09-04] 原服务器（CentOS8无法启动），启用&#123;new-domain&#125;. 更换远程url命令：git remote set-url origin &#39;http://`&#123;new-domain&#125;`/tips/linux.git&#39;","categories":[{"name":"Others","slug":"others","permalink":"https://cablefan.github.io/categories/others/"},{"name":"Notes","slug":"others/notes","permalink":"https://cablefan.github.io/categories/others/notes/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2024-12-23T09:28:11.469Z","updated":"2025-01-22T06:32:32.186Z","comments":true,"path":"2024/12/23/hello-world/","permalink":"https://cablefan.github.io/2024/12/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start出现连接失败时的解决法 参考：https://blog.csdn.net/qq_36408085/article/details/104117293 在PowerShell或者VSCode Terminal中执行命令前需要变更执行策略：Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope Process Create a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"Kotlin","slug":"Kotlin","permalink":"https://cablefan.github.io/categories/Kotlin/"},{"name":"Android","slug":"Kotlin/android","permalink":"https://cablefan.github.io/categories/Kotlin/android/"},{"name":".Net","slug":"Net","permalink":"https://cablefan.github.io/categories/Net/"},{"name":"Desktop","slug":"Net/Desktop","permalink":"https://cablefan.github.io/categories/Net/Desktop/"},{"name":"C#","slug":"Net/Desktop/csharp","permalink":"https://cablefan.github.io/categories/Net/Desktop/csharp/"},{"name":"PHP","slug":"php","permalink":"https://cablefan.github.io/categories/php/"},{"name":"Notes","slug":"php/notes","permalink":"https://cablefan.github.io/categories/php/notes/"},{"name":"Others","slug":"others","permalink":"https://cablefan.github.io/categories/others/"},{"name":"Notes","slug":"others/notes","permalink":"https://cablefan.github.io/categories/others/notes/"}],"tags":[]}